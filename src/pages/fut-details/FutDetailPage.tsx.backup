import React from 'react';
import { useRouter } from 'next/router';
import { ArrowLeft, Settings, Users, Calendar, MapPin, Crown, X, ChevronLeft, ChevronRight } from 'lucide-react';
import Image from 'next/image';
import { useAuth } from '@/contexts/AuthContext';
import { useFutState } from '@/hooks/fut-details/useFutState';
import { useFutActions } from '@/hooks/fut-details/useFutActions';
import { TabType } from '@/hooks/fut-details/types';

export default function FutDetailPage() {
const router = useRouter();
const { id } = router.query;
  
  // Hook de estado
  const futState = useFutState();
  
  // Hook de ações
  const futActions = useFutActions(futState.fut, futState.isAdmin || false, futState);
  
  // Get user from auth context
  const { user } = useAuth();

  // Loading state
  if (futState.loading) {
return (
<div className="min-h-screen bg-primary flex items-center justify-center">
<div className="text-secondary text-lg">Carregando...</div>
</div>
);
}

  // Fut not found
  if (!futState.fut) {
    return null;
  }

  const memberCount = Object.keys(futState.fut.members || {}).length;
  const isAdmin = futState.isAdmin;

return (
<div className="min-h-screen bg-primary">
      {/* Header with back button */}
      <div className="bg-primary-lighter border-b border-gray-700">
        <div className="px-6 py-4">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => router.back()}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <ArrowLeft size={24} />
            </button>
            <h1 className="text-white text-xl font-semibold">Detalhes do Fut</h1>
            {isAdmin && (
              <button
                onClick={() => futState.setActiveTab('settings')}
                className="ml-auto text-gray-400 hover:text-secondary transition-colors"
              >
                <Settings size={24} />
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Fut Image Section */}
      <div className="relative">
        {futState.fut.photoURL ? (
          <div 
            className="w-full h-64 bg-cover bg-center cursor-pointer"
            style={{ backgroundImage: `url(${futState.fut.photoURL})` }}
            onClick={() => futState.setShowImageModal(true)}
          >
            {/* Blur overlay at bottom */}
            <div className="absolute bottom-0 left-0 right-0 h-20 bg-gradient-to-t from-black/80 to-transparent" />
            
            {/* Fut Info over blur */}
            <div className="absolute bottom-0 left-0 right-0 p-4 pb-6">
              <div className="flex items-center space-x-2 mb-2">
                <h2 className="text-white text-xl font-bold drop-shadow-lg shadow-black truncate">{futState.fut.name}</h2>
                {isAdmin && (
                  <Crown size={18} className="text-yellow-500 drop-shadow-lg shadow-black flex-shrink-0" />
                )}
              </div>
              
              {futState.fut.description && (
                <p className="text-white mb-3 text-sm drop-shadow-lg shadow-black font-medium line-clamp-2">{futState.fut.description}</p>
              )}

              <div className="space-y-1 text-xs">
                <div className="flex items-center space-x-2">
                  <Calendar size={14} className="text-white drop-shadow-lg shadow-black flex-shrink-0" />
                  <span className="text-white drop-shadow-lg shadow-black font-medium truncate">{futActions.getRecurrenceText()}</span>
                </div>
                
                {futState.fut.location && (
                  <div className="flex items-center space-x-2">
                    <MapPin size={14} className="text-white drop-shadow-lg shadow-black flex-shrink-0" />
                    <span className="text-white drop-shadow-lg shadow-black font-medium truncate">{futState.fut.location}</span>
                  </div>
                )}
                
                <div className="flex items-center space-x-2">
                  <Users size={14} className="text-white drop-shadow-lg shadow-black flex-shrink-0" />
                  <span className="text-white drop-shadow-lg shadow-black font-medium">{memberCount} membros</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Calendar size={14} className="text-white drop-shadow-lg shadow-black flex-shrink-0" />
                  <span className="text-white drop-shadow-lg shadow-black font-medium">{futState.fut.maxVagas} vagas sugeridas</span>
                </div>
              </div>

              <div className="flex items-center space-x-2 mt-3 flex-wrap gap-1">
                <span className={`px-2 py-1 rounded-full text-xs font-medium drop-shadow-lg shadow-black ${
                  futState.fut.type === 'mensal' 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-purple-600 text-white'
                }`}>
                  {futState.fut.type === 'mensal' ? 'Fut Mensal' : 'Fut Avulso'}
                </span>
                
                {futState.fut.privacy === 'invite' && (
                  <span className="px-2 py-1 rounded-full text-xs font-medium bg-yellow-600 text-white drop-shadow-lg shadow-black">
                    Privado
                  </span>
                )}
              </div>
            </div>
          </div>
        ) : (
          <div className="w-full h-64 bg-primary-lighter flex items-center justify-center px-4">
            <div className="text-center max-w-full">
              <div className="w-20 h-20 bg-secondary rounded-lg flex items-center justify-center mx-auto mb-3">
                <span className="text-primary font-bold text-3xl">
                  {futState.fut.name.charAt(0).toUpperCase()}
                </span>
              </div>
              
              <div className="flex items-center justify-center space-x-2 mb-2">
                <h2 className="text-white text-xl font-bold truncate">{futState.fut.name}</h2>
                {isAdmin && (
                  <Crown size={18} className="text-yellow-500 flex-shrink-0" />
                )}
              </div>
              
              {futState.fut.description && (
                <p className="text-gray-400 mb-3 text-sm line-clamp-2">{futState.fut.description}</p>
              )}

              <div className="flex items-center justify-center space-x-2 mt-3 flex-wrap gap-1">
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  futState.fut.type === 'mensal' 
                    ? 'bg-blue-900 text-blue-300' 
                    : 'bg-purple-900 text-purple-300'
                }`}>
                  {futState.fut.type === 'mensal' ? 'Fut Mensal' : 'Fut Avulso'}
                </span>
                
                {futState.fut.privacy === 'invite' && (
                  <span className="px-2 py-1 rounded-full text-xs font-medium bg-yellow-900 text-yellow-300">
                    Privado
                  </span>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Tabs */}
      <div className="bg-primary-lighter border-b border-gray-700">
        <div className="px-6">
          <div className="flex items-center">
            {/* Previous Tab Button */}
            <button
              onClick={() => {
                const tabs = isAdmin 
                  ? ['fut', 'times', 'data', 'info', 'members', 'announcements', 'ranking', 'settings'] as TabType[]
                  : ['info', 'members', 'announcements', 'ranking'] as TabType[];
                const currentIndex = tabs.indexOf(futState.activeTab);
                const prevIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;
                futState.setActiveTab(tabs[prevIndex]);
              }}
              className="text-gray-400 hover:text-white transition-colors p-2 mr-2 flex-shrink-0"
            >
              <ChevronLeft size={16} />
            </button>
            
            {/* Tabs Container - Scrollable */}
            <div className="flex space-x-1 overflow-x-auto flex-1 min-w-0 tabs-scrollbar" style={{
              scrollbarWidth: 'thin',
              scrollbarColor: '#6b7280 transparent'
            }}>
              {isAdmin && (
                <button
                  onClick={() => futState.setActiveTab('fut')}
                  className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors whitespace-nowrap ${
                    futState.activeTab === 'fut'
                      ? 'bg-primary text-secondary'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Fut
                </button>
              )}
              {isAdmin && futState.futStarted && (
                <>
                  <button
                    onClick={() => futState.setActiveTab('times')}
                    className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors whitespace-nowrap ${
                      futState.activeTab === 'times'
                        ? 'bg-primary text-secondary'
                        : 'text-gray-400 hover:text-white'
                    }`}
                  >
                    Times
                  </button>
                  <button
                    onClick={() => futState.setActiveTab('data')}
                    className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors whitespace-nowrap ${
                      futState.activeTab === 'data'
                        ? 'bg-primary text-secondary'
                        : 'text-gray-400 hover:text-white'
                    }`}
                  >
                    Dados
                  </button>
                </>
              )}
              <button
                onClick={() => futState.setActiveTab('info')}
                className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors whitespace-nowrap ${
                  futState.activeTab === 'info'
                    ? 'bg-primary text-secondary'
                    : 'text-gray-400 hover:text-white'
                }`}
              >
                Info
              </button>
              <button
                onClick={() => futState.setActiveTab('members')}
                className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors whitespace-nowrap ${
                  futState.activeTab === 'members'
                    ? 'bg-primary text-secondary'
                    : 'text-gray-400 hover:text-white'
                }`}
              >
                Membros ({memberCount})
              </button>
              {isAdmin && (
                <button
                  onClick={() => futState.setActiveTab('announcements')}
                  className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors whitespace-nowrap ${
                    futState.activeTab === 'announcements'
                      ? 'bg-primary text-secondary'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Avisos
                </button>
              )}
              {isAdmin && (
                <button
                  onClick={() => futState.setActiveTab('ranking')}
                  className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors whitespace-nowrap ${
                    futState.activeTab === 'ranking'
                      ? 'bg-primary text-secondary'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Ranking
                </button>
              )}
              {isAdmin && (
                <button
                  onClick={() => futState.setActiveTab('settings')}
                  className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors whitespace-nowrap ${
                    futState.activeTab === 'settings'
                      ? 'bg-primary text-secondary'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Configurações
                </button>
              )}
            </div>

            {/* Next Tab Button */}
            <button
              onClick={() => {
                const tabs = isAdmin 
                  ? ['fut', 'times', 'data', 'info', 'members', 'announcements', 'ranking', 'settings'] as TabType[]
                  : ['info', 'members', 'announcements', 'ranking'] as TabType[];
                const currentIndex = tabs.indexOf(futState.activeTab);
                const nextIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;
                futState.setActiveTab(tabs[nextIndex]);
              }}
              className="text-gray-400 hover:text-white transition-colors p-2 ml-2 flex-shrink-0"
            >
              <ChevronRight size={16} />
            </button>
          </div>
        </div>
      </div>

      {/* Tab Content */}
      <div className="px-6 py-6">
        {/* Fut Tab */}
        {futState.activeTab === 'fut' && isAdmin && (
          <div className="space-y-4">
            {!futState.futStarted ? (
              <>
                {/* Next Game Section */}
                <div className="bg-primary-lighter rounded-lg p-3">
                  <h3 className="text-white text-base font-semibold mb-3">Próximo Fut 23/09/2025</h3>
                  
                  <div className="space-y-3">
                    <div className="flex space-x-2">
                      <input
                        type="number"
                        min="1"
                        max={futState.fut?.maxVagas}
                        value={futState.releasedVagas}
                        onChange={(e) => futState.setReleasedVagas(parseInt(e.target.value) || futState.fut?.maxVagas || 0)}
                        className="flex-1 px-2 py-1 bg-primary border border-gray-600 rounded text-white placeholder-gray-400 focus:outline-none focus:border-secondary text-sm"
                        placeholder="Vagas"
                      />
                      <button 
                        onClick={futActions.handleReleaseList}
                        disabled={futState.listReleased}
                        className="bg-secondary text-primary px-3 py-1 rounded text-sm font-medium hover:bg-secondary-darker transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {futState.listReleased ? 'Liberada' : 'Liberar'}
                      </button>
                    </div>
                    
                    {/* Action buttons for admin */}
                    {futState.listReleased && (
                      <div className="flex space-x-2">
                        <button 
                          onClick={() => futActions.handleConfirmPresence(true)}
                          className={`flex-1 py-1 rounded text-sm font-medium transition-colors ${
                            futState.confirmedMembers.includes(user?.uid || '') 
                              ? 'bg-green-700 text-white' 
                              : 'bg-green-600 text-black hover:bg-green-700'
                          }`}
                        >
                          To Dentro
                        </button>
                        <button 
                          onClick={() => futActions.handleConfirmPresence(false)}
                          className={`flex-1 py-1 rounded text-sm font-medium transition-colors ${
                            !futState.confirmedMembers.includes(user?.uid || '') 
                              ? 'bg-red-700 text-white' 
                              : 'bg-red-600 text-black hover:bg-red-700'
                          }`}
                        >
                          To Fora
                        </button>
                        <button 
                          onClick={() => futState.setShowGuestModal(true)}
                          className="bg-blue-600 text-white px-3 py-1 rounded text-sm font-medium hover:bg-blue-700 transition-colors"
                        >
                          + Convidado
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </>
            ) : (
              /* Read-only view after fut started */
              <div className="bg-primary-lighter rounded-lg p-3">
                <h3 className="text-white text-base font-semibold mb-3">Fut em Andamento - 23/09/2025</h3>
                
                <div className="space-y-3">
                  <div className="text-gray-400 text-sm">
                    Vagas: {futState.releasedVagas}
                  </div>
                  
                  <div className="text-gray-400 text-sm">
                    Confirmados: {futState.confirmedMembers.length}
                  </div>
                </div>
              </div>
            )}

            {/* Confirmed List Section - Only show after list is released */}
            {futState.listReleased && (
              <div className="bg-primary-lighter rounded-lg p-3">
                <h3 className="text-white text-base font-semibold mb-3">Lista de Confirmados para o Fut 23/09/2025</h3>
                
                {/* Progress Bar */}
                <div className="mb-3">
                  <div className="flex justify-between text-sm text-gray-400 mb-1">
                    <span>Confirmados</span>
                    <span>{futState.confirmedMembers.length}/{futState.releasedVagas}</span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div 
                      className="bg-secondary h-2 rounded-full" 
                      style={{ width: `${Math.min((futState.confirmedMembers.length / futState.releasedVagas) * 100, 100)}%` }}
                    ></div>
                  </div>
                </div>
                
                {/* Confirmed Members List */}
                <div className="space-y-2">
                  {futState.confirmedMembers.map((memberId, index) => {
                    const memberData = futState.members[memberId];
                    return (
                      <div key={memberId} className="flex items-center justify-between bg-gray-800 rounded-lg p-2">
                        <div className="flex items-center space-x-2 flex-1">
                          <span className="text-secondary font-bold text-sm w-6">{index + 1} -</span>
                          {memberData?.photoURL ? (
                            <div className="w-8 h-8 rounded-full overflow-hidden flex-shrink-0">
                              <Image
                                src={memberData.photoURL}
                                alt={memberData.name}
                                width={32}
                                height={32}
                                className="w-full h-full object-cover"
                              />
                            </div>
                          ) : (
                            <div className="w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0">
                              <span className="text-primary font-semibold text-xs">
                                {memberData?.name?.charAt(0).toUpperCase() || 'C'}
                              </span>
                            </div>
                          )}
                          <div className="flex flex-col">
                            <span className="text-white font-medium text-sm">{memberData?.name || 'VAGA'}</span>
                            {memberData?.isGuest && (
                              <span className="text-gray-400 text-xs">(Convidado)</span>
                            )}
                          </div>
                        </div>
                        
                        {/* Remove from confirmed button - only for admins */}
                        {isAdmin && (
                          <button
                            onClick={() => futActions.handleRemoveFromConfirmed(memberId)}
                            className="bg-red-500 hover:bg-red-600 text-white p-1.5 rounded-lg text-xs transition-all duration-200 flex items-center space-x-1 shadow-sm hover:shadow-md"
                            title="Remover da lista de confirmados"
                          >
                            <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        )}
                      </div>
                    );
                  })}
                </div>
                
                <button 
                  onClick={futActions.handleShareList}
                  className="w-full mt-3 bg-green-600 text-white py-2 rounded text-sm font-medium hover:bg-green-700 transition-colors"
                >
                  Compartilhar Lista
                </button>
              </div>
            )}

            {/* Start Fut Button */}
            {futState.listReleased && !futState.futStarted && (
              <div className="bg-primary-lighter rounded-lg p-3">
                <button 
                  onClick={futActions.handleStartFut}
                  className="w-full bg-yellow-600 text-white py-2 rounded text-sm font-medium hover:bg-yellow-700 transition-colors"
                >
                  Iniciar Fut
                </button>
              </div>
            )}
          </div>
        )}

        {/* Info Tab */}
        {futState.activeTab === 'info' && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-white text-lg font-semibold">Informações do Fut</h3>
              {isAdmin && (
                <button 
                  onClick={() => {
                    futState.setEditName(futState.fut?.name || '');
                    futState.setEditDescription(futState.fut?.description || '');
                    futState.setEditTime(futState.fut?.time || '');
                    futState.setEditLocation(futState.fut?.location || '');
                    futState.setEditMaxVagas(futState.fut?.maxVagas?.toString() || '');
                    futState.setEditPlayersPerTeam(futState.fut?.playersPerTeam?.toString() || '');
                    futState.setShowEditInfoModal(true);
                  }}
                  className="bg-secondary text-primary px-4 py-2 rounded-lg text-sm font-medium hover:bg-secondary-darker transition-colors"
                >
                  Editar
                </button>
              )}
            </div>
            
            {/* Informações Básicas */}
            <div className="bg-primary-lighter rounded-lg p-4">
              <h4 className="text-white text-base font-semibold mb-3 flex items-center">
                <Settings size={18} className="mr-2" />
                Informações Básicas
              </h4>
              <div className="space-y-3">
                <div>
                  <span className="text-gray-400 text-sm">Nome:</span>
                  <p className="text-white font-medium">{futState.fut?.name || 'Não definido'}</p>
                </div>
                <div>
                  <span className="text-gray-400 text-sm">Tipo:</span>
                  <p className="text-white font-medium">
                    {futState.fut?.type === 'mensal' ? 'Fut Mensal' : 'Fut Avulso'}
                  </p>
                </div>
                <div>
                  <span className="text-gray-400 text-sm">Privacidade:</span>
                  <p className="text-white font-medium">
                    {futState.fut?.privacy === 'invite' ? 'Privado (por convite)' : 'Público'}
                  </p>
                </div>
              </div>
            </div>

            {/* Descrição */}
            <div className="bg-primary-lighter rounded-lg p-4">
              <h4 className="text-white text-base font-semibold mb-3">Descrição</h4>
              <p className="text-gray-300 text-sm leading-relaxed">
                {futState.fut?.description || 'Nenhuma descrição disponível.'}
              </p>
            </div>

            {/* Detalhes do Jogo */}
            <div className="bg-primary-lighter rounded-lg p-4">
              <h4 className="text-white text-base font-semibold mb-3 flex items-center">
                <Calendar size={18} className="mr-2" />
                Detalhes do Jogo
              </h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">Horário:</span>
                  <span className="text-white font-medium">{futState.fut?.time || 'Não definido'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Local:</span>
                  <span className="text-white font-medium">{futState.fut?.location || 'Não definido'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Jogadores por time:</span>
                  <span className="text-white font-medium">{futState.fut?.playersPerTeam || 'Não definido'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Máximo de vagas:</span>
                  <span className="text-white font-medium">{futState.fut?.maxVagas || 'Não definido'}</span>
                </div>
              </div>
            </div>

            {/* Recorrência */}
            {futState.fut?.type === 'mensal' && (
              <div className="bg-primary-lighter rounded-lg p-4">
                <h4 className="text-white text-base font-semibold mb-3 flex items-center">
                  <Calendar size={18} className="mr-2" />
                  Recorrência
                </h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Frequência:</span>
                    <span className="text-white font-medium">{futActions.getRecurrenceText()}</span>
                  </div>
                  {futState.fut?.recurrence?.day !== undefined && (
                    <div className="flex justify-between">
                      <span className="text-gray-400">Dia:</span>
                      <span className="text-white font-medium">
                        {futState.fut.recurrence.kind === 'weekly' 
                          ? ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'][futState.fut.recurrence.day]
                          : `Dia ${futState.fut.recurrence.day} do mês`
                        }
                      </span>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Estatísticas */}
            <div className="bg-primary-lighter rounded-lg p-4">
              <h4 className="text-white text-base font-semibold mb-3 flex items-center">
                <Users size={18} className="mr-2" />
                Estatísticas
              </h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">Membros:</span>
                  <span className="text-white font-medium">{Object.keys(futState.members).length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Administradores:</span>
                  <span className="text-white font-medium">
                    {Object.keys(futState.fut?.admins || {}).length}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Criado em:</span>
                  <span className="text-white font-medium">
                    {futState.fut?.createdAt ? new Date(futState.fut.createdAt).toLocaleDateString('pt-BR') : 'Não disponível'}
                  </span>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Members Tab */}
        {futState.activeTab === 'members' && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-white text-lg font-semibold">Membros</h3>
              {isAdmin && (
                <button 
                  onClick={() => futState.setShowAddMemberModal(true)}
                  className="bg-secondary text-primary px-4 py-2 rounded-lg text-sm font-medium hover:bg-secondary-darker transition-colors"
                >
                  Adicionar Membro
                </button>
              )}
            </div>

            <div className="space-y-3">
              {Object.entries(futState.members)
                .filter(([memberId, memberData]) => !memberData.isGuest) // Exclude guests
                .map(([memberId, memberData]) => (
                  <div
                    key={memberId}
                    className={`bg-primary-lighter rounded-lg p-4 border border-gray-700 ${
                      isAdmin ? 'cursor-pointer hover:bg-primary hover:border-gray-600 transition-colors' : ''
                    }`}
                    onClick={() => {
                      if (isAdmin) {
                        futState.setSelectedMemberForAdmin({ uid: memberId, name: memberData.name });
                        futState.setShowMakeAdminModal(true);
                      }
                    }}
                  >
                    <div className="flex items-center space-x-3">
                      {memberData.photoURL ? (
                        <div className="w-10 h-10 rounded-full overflow-hidden flex-shrink-0">
                          <Image
                            src={memberData.photoURL}
                            alt={memberData.name}
                            width={40}
                            height={40}
                            className="w-full h-full object-cover"
                          />
                        </div>
                      ) : (
                        <div className="w-10 h-10 bg-secondary rounded-full flex items-center justify-center flex-shrink-0">
                          <span className="text-primary font-semibold text-sm">
                            {memberData.name?.charAt(0).toUpperCase()}
                          </span>
                        </div>
                      )}

                      <div className="flex-1 min-w-0">
                        <div className="flex items-center space-x-2">
                          <h4 className="text-white font-medium">{memberData.name}</h4>
                          {memberId === futState.fut?.adminId && (
                            <Crown size={16} className="text-yellow-500" />
                          )}
                          {memberId !== futState.fut?.adminId && futState.fut?.admins?.[memberId] && (
                            <Crown size={16} className="text-green-500" />
                          )}
                        </div>
                        {memberData.position && (
                          <p className="text-gray-400 text-sm">{memberData.position}</p>
                        )}
                      </div>

                      {/* Member actions */}
                      {isAdmin && (
                        <div className="flex space-x-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              futActions.handleRemoveMember(memberId, memberData.name);
                            }}
                            className="bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700 transition-colors"
                          >
                            Remover
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
            </div>
          </div>
        )}

        {/* Ranking Tab */}
        {futState.activeTab === 'ranking' && isAdmin && (
          <div className="space-y-6">
            <h3 className="text-white text-lg font-semibold">Rankings</h3>
            
            {/* View Selector */}
            <div className="flex space-x-2">
              <button
                onClick={() => futState.setRankingView('geral')}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  futState.rankingView === 'geral'
                    ? 'bg-secondary text-primary'
                    : 'bg-gray-600 text-white hover:bg-gray-700'
                }`}
              >
                Geral
              </button>
              <button
                onClick={() => futState.setRankingView('rodada')}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  futState.rankingView === 'rodada'
                    ? 'bg-secondary text-primary'
                    : 'bg-gray-600 text-white hover:bg-gray-700'
                }`}
              >
                Rodada
              </button>
              <button
                onClick={() => futState.setRankingView('fut')}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  futState.rankingView === 'fut'
                    ? 'bg-secondary text-primary'
                    : 'bg-gray-600 text-white hover:bg-gray-700'
                }`}
              >
                Por Fut
              </button>
            </div>

            {/* Ranking Type Selector */}
            <div className="grid grid-cols-2 gap-2">
              <button
                onClick={() => futActions.handleGenerateRanking('pontuacao')}
                className={`px-3 py-2 rounded text-sm font-medium text-center ${
                  futState.rankingType === 'pontuacao'
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-600 text-white hover:bg-gray-700'
                }`}
              >
                Pontuação
              </button>
              <button
                onClick={() => futActions.handleGenerateRanking('artilharia')}
                className={`px-3 py-2 rounded text-sm font-medium text-center ${
                  futState.rankingType === 'artilharia'
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-600 text-white hover:bg-gray-700'
                }`}
              >
                Artilharia
              </button>
              <button
                onClick={() => futActions.handleGenerateRanking('assistencias')}
                className={`px-3 py-2 rounded text-sm font-medium text-center ${
                  futState.rankingType === 'assistencias'
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-600 text-white hover:bg-gray-700'
                }`}
              >
                Assistências
              </button>
              <button
                onClick={() => futActions.handleGenerateRanking('vitorias')}
                className={`px-3 py-2 rounded text-sm font-medium text-center ${
                  futState.rankingType === 'vitorias'
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-600 text-white hover:bg-gray-700'
                }`}
              >
                Vitórias
              </button>
            </div>

            {/* Fut History Selector (only for "Por Fut" view) */}
            {futState.rankingView === 'fut' && (
              <div className="space-y-3">
                <h4 className="text-white font-medium">Selecionar Fut:</h4>
                <div className="space-y-2 max-h-40 overflow-y-auto">
                  {futState.futHistory.map((futData) => (
                    <button
                      key={futData.id}
                      onClick={() => {
                        futState.setSelectedDate(futData.id);
                        futActions.handleGenerateRanking(futState.rankingType);
                      }}
                      className={`w-full text-left p-3 rounded-lg border transition-colors ${
                        futState.selectedDate === futData.id
                          ? 'bg-secondary text-primary border-secondary'
                          : 'bg-primary-lighter text-white border-gray-600 hover:bg-primary'
                      }`}
                    >
                      <div className="font-medium">{futData.name || 'Fut'}</div>
                      <div className="text-sm opacity-75">
                        {new Date(futData.date).toLocaleDateString('pt-BR')}
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Ranking Display */}
            {futState.ranking && futState.ranking.length > 0 && (
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <h4 className="text-white font-semibold">
                    {futState.rankingView === 'geral' ? 'Ranking Geral' : 
                     futState.rankingView === 'rodada' ? 'Ranking da Rodada' : 
                     'Ranking do Fut'}
                  </h4>
                  <div className="flex space-x-2">
                    <button
                      onClick={futActions.handleGenerateImage}
                      className="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700 transition-colors"
                    >
                      Gerar Imagem
                    </button>
                  </div>
                </div>
                
                <div className="space-y-2">
                  {futState.ranking.slice(0, 10).map((item: any, index: number) => {
                    const position = index + 1;
                    const medal = position === 1 ? '🥇' : position === 2 ? '🥈' : position === 3 ? '🥉' : '';
                    
                    return (
                      <div key={item.playerId} className="bg-primary-lighter rounded-lg p-3 flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="text-2xl">{medal}</div>
                          <div>
                            <div className="text-white font-medium">{item.name}</div>
                            <div className="text-gray-400 text-sm">#{position}</div>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-green-400 font-bold text-lg">
                            {futState.rankingType === 'pontuacao' ? item.score :
                             futState.rankingType === 'artilharia' ? item.goals :
                             futState.rankingType === 'assistencias' ? item.assists :
                             item.wins}
                          </div>
                          <div className="text-gray-400 text-sm">
                            {futState.rankingType === 'pontuacao' ? 'pts' :
                             futState.rankingType === 'artilharia' ? 'gols' :
                             futState.rankingType === 'assistencias' ? 'assist' :
                             'vitórias'}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Times Tab */}
        {futState.activeTab === 'times' && isAdmin && futState.futStarted && (
          <div className="space-y-4">
            {Object.keys(futState.teams).length === 0 ? (
              <div className="space-y-3">
                <div className="flex space-x-2">
                  <button 
                    onClick={() => futState.setShowTeamDrawModal(true)}
                    className="flex-1 bg-blue-600 text-white py-2 rounded text-sm font-medium hover:bg-blue-700 transition-colors"
                  >
                    Sorteio de Times
                  </button>
                  <button 
                    onClick={() => futState.setShowTeamSelectModal(true)}
                    className="flex-1 bg-green-600 text-white py-2 rounded text-sm font-medium hover:bg-green-700 transition-colors"
                  >
                    Escolher Times
                  </button>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="flex space-x-2">
                  <button 
                    onClick={futActions.handleDeleteTeams}
                    className="bg-red-600 text-white px-3 py-1 rounded text-sm font-medium hover:bg-red-700 transition-colors"
                  >
                    Apagar Times
                  </button>
                  <button 
                    onClick={futActions.handleShareTeams}
                    className="bg-green-600 text-white px-3 py-1 rounded text-sm font-medium hover:bg-green-700 transition-colors"
                  >
                    Compartilhar Times
                  </button>
                </div>
                
                <div className="bg-primary-lighter rounded-lg p-3">
                  <h3 className="text-white text-base font-semibold mb-3">TIMES:</h3>
                  <div className="space-y-4">
                    {Object.entries(futState.teams).map(([teamName, players]) => (
                      <div key={teamName} className="space-y-2">
                        <h4 className="text-secondary font-semibold">{teamName}</h4>
                        <div className="space-y-1">
                          {players.map((playerId, index) => {
                            const player = futState.members[playerId];
                            return (
                              <div key={playerId} className="text-white text-sm">
                                {index + 1}- {player?.name || 'VAGA'}
                              </div>
                            );
                          })}
                          {/* Add VAGA if team is not full */}
                          {Array.from({ length: Math.max(0, parseInt(futState.playersPerTeam || futState.fut?.playersPerTeam?.toString() || '5') - players.length) }).map((_, index) => (
                            <div key={`vaga-${index}`} className="text-gray-400 text-sm">
                              {players.length + index + 1}- VAGA
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Data Tab */}
        {futState.activeTab === 'data' && isAdmin && futState.futStarted && (
          <div className="space-y-4">
            {Object.keys(futState.teams).length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-400">Os times ainda não foram escolhidos</p>
              </div>
            ) : (
              <div className="space-y-4">
                {!futState.futEnded && (
                  <button 
                    onClick={futActions.handleEndFut}
                    className="w-full bg-red-600 text-white py-2 rounded text-sm font-medium hover:bg-red-700 transition-colors"
                  >
                    Encerrar Fut
                  </button>
                )}

                {futState.futEnded && !futState.votingOpen && !futState.votingEnded && (
                  <button 
                    onClick={futActions.handleStartVoting}
                    className="w-full bg-blue-600 text-white py-2 rounded text-sm font-medium hover:bg-blue-700 transition-colors"
                  >
                    Liberar Votação
                  </button>
                )}

                {futState.votingOpen && (
                  <button 
                    onClick={futActions.handleEndVoting}
                    className="w-full bg-yellow-600 text-white py-2 rounded text-sm font-medium hover:bg-yellow-700 transition-colors"
                  >
                    Encerrar Votação
                  </button>
                )}

                {futState.votingEnded && !futState.showRanking && (
                  <button 
                    onClick={() => futActions.handleGenerateRanking('pontuacao')}
                    className="w-full bg-green-600 text-white py-2 rounded text-sm font-medium hover:bg-green-700 transition-colors"
                  >
                    Gerar Ranking
                  </button>
                )}

                {futState.showRanking && (
                  <button 
                    onClick={futActions.handleFinalizeFut}
                    className="w-full bg-purple-600 text-white py-2 rounded text-sm font-medium hover:bg-purple-700 transition-colors"
                  >
                    Finalizar Fut
                  </button>
                )}

                {/* Voting Section */}
                {futState.votingOpen && (
                  <div className="bg-primary-lighter rounded-lg p-4">
                    <h3 className="text-white text-lg font-semibold mb-4">Votação - Avalie os Jogadores</h3>
                    <div className="space-y-4">
                      {Object.values(futState.teams).flat()
                        .filter(playerId => {
                          if (playerId === 'VAGA') return false;
                          const player = futState.members[playerId];
                          // Only members, not any type of guest
                          return !player?.isGuest;
                        })
                        .map((playerId) => {
                        const player = futState.members[playerId];
                        const currentVote = futState.userVotes[user?.uid || '']?.[playerId] || 0;
                        
                        return (
                          <div key={playerId} className="bg-primary p-3 rounded-lg">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center space-x-3 flex-1 min-w-0">
                                {player?.photoURL ? (
                                  <div className="w-8 h-8 rounded-full overflow-hidden flex-shrink-0">
                                    <Image
                                      src={player.photoURL}
                                      alt={player.name}
                                      width={32}
                                      height={32}
                                      className="w-full h-full object-cover"
                                    />
                                  </div>
                                ) : (
                                  <div className="w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0">
                                    <span className="text-primary font-semibold text-xs">
                                      {player?.name?.charAt(0).toUpperCase() || 'C'}
                                    </span>
                                  </div>
                                )}
                                <div className="min-w-0 flex-1">
                                  <span className="text-white text-sm font-medium truncate block">{player?.name || 'VAGA'}</span>
                                </div>
                              </div>
                              
                              <div className="flex items-center space-x-0.5 ml-2 flex-shrink-0">
                                {[1, 2, 3, 4, 5].map((star) => (
                                  <button
                                    key={star}
                                    onClick={() => futActions.handleVote(playerId, star)}
                                    className={`w-6 h-6 rounded text-sm ${
                                      star <= currentVote
                                        ? 'text-yellow-400'
                                        : 'text-gray-400 hover:text-yellow-300'
                                    }`}
                                  >
                                    ★
                                  </button>
                                ))}
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}

                {/* Ranking Section */}
                {futState.showRanking && futState.ranking && (
                  <div className="bg-primary-lighter rounded-lg p-4">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-white text-lg font-semibold">
                        {futState.rankingType === 'pontuacao' ? 'Ranking de Pontuação' :
                         futState.rankingType === 'artilharia' ? 'Ranking de Artilharia' :
                         futState.rankingType === 'assistencias' ? 'Ranking de Assistências' :
                         'Ranking de Vitórias'}
                      </h3>
                      <div className="grid grid-cols-2 gap-1">
                        <button 
                          onClick={() => futActions.handleGenerateRanking('pontuacao')}
                          className={`px-2 py-1.5 rounded text-xs font-medium text-center truncate ${
                            futState.rankingType === 'pontuacao' ? 'bg-secondary text-primary' : 'bg-gray-600 text-white'
                          }`}
                        >
                          Pontuação
                        </button>
                        <button 
                          onClick={() => futActions.handleGenerateRanking('artilharia')}
                          className={`px-2 py-1.5 rounded text-xs font-medium text-center truncate ${
                            futState.rankingType === 'artilharia' ? 'bg-secondary text-primary' : 'bg-gray-600 text-white'
                          }`}
                        >
                          Artilharia
                        </button>
                        <button 
                          onClick={() => futActions.handleGenerateRanking('assistencias')}
                          className={`px-2 py-1.5 rounded text-xs font-medium text-center truncate ${
                            futState.rankingType === 'assistencias' ? 'bg-secondary text-primary' : 'bg-gray-600 text-white'
                          }`}
                        >
                          Assistências
                        </button>
                        <button 
                          onClick={() => futActions.handleGenerateRanking('vitorias')}
                          className={`px-2 py-1.5 rounded text-xs font-medium text-center truncate ${
                            futState.rankingType === 'vitorias' ? 'bg-secondary text-primary' : 'bg-gray-600 text-white'
                          }`}
                        >
                          Vitórias
                        </button>
                      </div>
                    </div>
                    
                    
                    <div className="space-y-3">
                      {futState.ranking.slice(0, 3).map((item: any, index: number) => (
                        <div key={item.playerId || item.teamName} className="bg-primary p-3 rounded-lg">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                              <div className="text-4xl">
                                {index === 0 ? '🥇' : index === 1 ? '🥈' : '🥉'}
                              </div>
                              {futState.rankingType === 'vitorias' ? (
                                <div>
                                  <div className="text-white text-sm font-medium">{item.teamName}</div>
                                  <div className="text-gray-400 text-xs">
                                    {item.wins} vitórias
                                  </div>
                                </div>
                              ) : (
                                <>
                                  {futState.members[item.playerId]?.photoURL ? (
                                    <div className="w-8 h-8 rounded-full overflow-hidden flex-shrink-0">
                                      <Image
                                        src={futState.members[item.playerId]?.photoURL || ''}
                                        alt={item.name}
                                        width={32}
                                        height={32}
                                        className="w-full h-full object-cover"
                                      />
                                    </div>
                                  ) : (
                                    <div className="w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0">
                                      <span className="text-primary font-semibold text-xs">
                                        {item.name?.charAt(0).toUpperCase() || 'C'}
                                      </span>
                                    </div>
                                  )}
                                  <div>
                                    <div className="text-white text-sm font-medium">{item.name}</div>
                                    <div className="text-gray-400 text-xs">
                                      {futState.rankingType === 'pontuacao' ? `${item.score} pts` :
                                       futState.rankingType === 'artilharia' ? `${item.goals} gols` :
                                       `${item.assists} assistências`}
                                    </div>
                                  </div>
                                </>
                              )}
                            </div>
                            
                            <div className="text-right">
                              <div className="text-secondary font-semibold text-lg">
                                {futState.rankingType === 'pontuacao' ? item.score :
                                 futState.rankingType === 'artilharia' ? item.goals :
                                 futState.rankingType === 'assistencias' ? item.assists :
                                 item.wins}
                              </div>
                              <div className="text-gray-400 text-xs">
                                #{index + 1}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    <div className="mt-4 flex justify-center space-x-3">
                      <button 
                        onClick={futActions.handleGenerateImage}
                        className="bg-green-600 text-white px-4 py-2 rounded text-sm font-medium hover:bg-green-700 transition-colors"
                      >
                        Gerar Imagem
                      </button>
                      <button 
                        onClick={() => futState.setShowBolaCardsModal(true)}
                        className="bg-purple-600 text-white px-4 py-2 rounded text-sm font-medium hover:bg-purple-700 transition-colors"
                      >
                        Gerar Bola Cheia e Bola Murcha
                      </button>
                    </div>
                  </div>
                )}

                
                <div className="space-y-6">
                  {Object.entries(futState.teams).map(([teamName, players], teamIndex) => (
                    <div key={teamName} className="bg-primary-lighter rounded-lg p-4">
                      {/* Team Header */}
                      <div className="flex items-center justify-between mb-4 pb-3 border-b border-gray-600">
                        <h3 className="text-white font-semibold text-lg">{teamName}</h3>
                        {!futState.futEnded && (
                          <div className="flex items-center space-x-3">
                            <span className="text-gray-400 text-sm">Vitórias:</span>
                            <div className="flex items-center space-x-2">
                              <button 
                                onClick={() => futActions.handleUpdateTeamWins(teamName, -1)}
                                className="w-7 h-7 bg-red-600 text-white rounded text-sm font-bold hover:bg-red-700 transition-colors"
                              >
                                -
                              </button>
                              <span className="text-white font-semibold min-w-[25px] text-center text-lg">
                                {futState.teamStats[teamName]?.wins || 0}
                              </span>
                              <button 
                                onClick={() => futActions.handleUpdateTeamWins(teamName, 1)}
                                className="w-7 h-7 bg-green-600 text-white rounded text-sm font-bold hover:bg-green-700 transition-colors"
                              >
                                +
                              </button>
                            </div>
                          </div>
                        )}
                      </div>
                      
                      {/* Players Section */}
                      <div className="space-y-3">
                        <h4 className="text-gray-300 text-sm font-medium uppercase tracking-wide">Jogadores</h4>
                        <div className="space-y-2">
                        {players
                          .filter(playerId => {
                            if (playerId === 'VAGA') return false;
                            const player = futState.members[playerId];
                            // Allow members and registered guests, but not avulso guests
                            return !player?.isGuest || player?.guestType === 'cadastrado';
                          })
                          .map((playerId) => {
                          const player = futState.members[playerId];
                          const isGuest = player?.isGuest;
                          
                          return (
                            <div key={playerId} className="bg-primary p-3 rounded-lg">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-3">
                                  {player?.photoURL ? (
                                    <div className="w-8 h-8 rounded-full overflow-hidden flex-shrink-0">
                                      <Image
                                        src={player.photoURL}
                                        alt={player.name}
                                        width={32}
                                        height={32}
                                        className="w-full h-full object-cover"
                                      />
                                    </div>
                                  ) : (
                                    <div className="w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0">
                                      <span className="text-primary font-semibold text-xs">
                                        {player?.name?.charAt(0).toUpperCase() || 'C'}
                                      </span>
                                    </div>
                                  )}
                                  <div>
                                    <span className="text-white text-sm font-medium">{player?.name || 'VAGA'}</span>
                                    {player?.isGuest && (
                                      <span className="text-gray-400 text-xs ml-2">(Convidado)</span>
                                    )}
                                  </div>
                                </div>
                                
                                {!futState.futEnded && (
                                  <div className="space-y-4">
                                    {/* Goals */}
                                    <div className="flex flex-col items-center space-y-2">
                                      <span className="text-gray-400 text-sm font-medium">Gols:</span>
                                      <div className="flex items-center space-x-2">
                                        <button 
                                          onClick={() => futActions.handleUpdatePlayerStats(playerId, 'goals', -1)}
                                          className="w-6 h-6 bg-red-600 text-white rounded text-xs font-bold hover:bg-red-700 transition-colors"
                                        >
                                          -
                                        </button>
                                        <span className="text-white text-lg min-w-[20px] text-center font-semibold">
                                          {futState.playerStats[playerId]?.goals || 0}
                                        </span>
                                        <button 
                                          onClick={() => futActions.handleUpdatePlayerStats(playerId, 'goals', 1)}
                                          className="w-6 h-6 bg-green-600 text-white rounded text-xs font-bold hover:bg-green-700 transition-colors"
                                        >
                                          +
                                        </button>
                                      </div>
                                    </div>
                                    
                                    {/* Assists */}
                                    <div className="flex flex-col items-center space-y-2">
                                      <span className="text-gray-400 text-sm font-medium">Assistências:</span>
                                      <div className="flex items-center space-x-2">
                                        <button 
                                          onClick={() => futActions.handleUpdatePlayerStats(playerId, 'assists', -1)}
                                          className="w-6 h-6 bg-red-600 text-white rounded text-xs font-bold hover:bg-red-700 transition-colors"
                                        >
                                          -
                                        </button>
                                        <span className="text-white text-lg min-w-[20px] text-center font-semibold">
                                          {futState.playerStats[playerId]?.assists || 0}
                                        </span>
                                        <button 
                                          onClick={() => futActions.handleUpdatePlayerStats(playerId, 'assists', 1)}
                                          className="w-6 h-6 bg-green-600 text-white rounded text-xs font-bold hover:bg-green-700 transition-colors"
                                        >
                                          +
                                        </button>
                                      </div>
                                    </div>
                                  </div>
        )}
      </div>

      {/* Edit Info Modal */}
      {futState.showEditInfoModal && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-primary-lighter rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between p-4 border-b border-gray-600">
              <h2 className="text-white text-xl font-semibold">Editar Informações do Fut</h2>
              <button
                onClick={() => futState.setShowEditInfoModal(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X size={24} />
              </button>
            </div>

            <div className="p-4 space-y-4">
              {/* Nome */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Nome *
                </label>
                <input
                  type="text"
                  value={futState.editName}
                  onChange={(e) => futState.setEditName(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Nome do fut"
                />
              </div>

              {/* Descrição */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Descrição
                </label>
                <textarea
                  value={futState.editDescription}
                  onChange={(e) => futState.setEditDescription(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary resize-none"
                  placeholder="Descrição do fut"
                  rows={3}
                />
              </div>

              {/* Horário */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Horário *
                </label>
                <input
                  type="text"
                  value={futState.editTime}
                  onChange={(e) => futState.setEditTime(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Ex: 19:00"
                />
              </div>

              {/* Local */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Local *
                </label>
                <input
                  type="text"
                  value={futState.editLocation}
                  onChange={(e) => futState.setEditLocation(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Local do fut"
                />
              </div>

              {/* Máximo de vagas */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Máximo de vagas *
                </label>
                <input
                  type="number"
                  value={futState.editMaxVagas}
                  onChange={(e) => futState.setEditMaxVagas(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Ex: 20"
                  min="1"
                />
              </div>

              {/* Jogadores por time */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Jogadores por time *
                </label>
                <input
                  type="number"
                  value={futState.editPlayersPerTeam}
                  onChange={(e) => futState.setEditPlayersPerTeam(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Ex: 5"
                  min="1"
                />
              </div>

              {/* Botões */}
              <div className="flex space-x-3 pt-4">
                <button
                  onClick={() => futState.setShowEditInfoModal(false)}
                  className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={() => futActions.handleUpdateFutInfo()}
                  className="flex-1 px-4 py-2 bg-secondary text-primary rounded-lg font-medium hover:bg-secondary-darker transition-colors"
                >
                  Salvar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Edit Info Modal */}
      {futState.showEditInfoModal && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-primary-lighter rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between p-4 border-b border-gray-600">
              <h2 className="text-white text-xl font-semibold">Editar Informações do Fut</h2>
              <button
                onClick={() => futState.setShowEditInfoModal(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X size={24} />
              </button>
            </div>

            <div className="p-4 space-y-4">
              {/* Nome */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Nome *
                </label>
                <input
                  type="text"
                  value={futState.editName}
                  onChange={(e) => futState.setEditName(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Nome do fut"
                />
              </div>

              {/* Descrição */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Descrição
                </label>
                <textarea
                  value={futState.editDescription}
                  onChange={(e) => futState.setEditDescription(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary resize-none"
                  placeholder="Descrição do fut"
                  rows={3}
                />
              </div>

              {/* Horário */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Horário *
                </label>
                <input
                  type="text"
                  value={futState.editTime}
                  onChange={(e) => futState.setEditTime(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Ex: 19:00"
                />
              </div>

              {/* Local */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Local *
                </label>
                <input
                  type="text"
                  value={futState.editLocation}
                  onChange={(e) => futState.setEditLocation(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Local do fut"
                />
              </div>

              {/* Máximo de vagas */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Máximo de vagas *
                </label>
                <input
                  type="number"
                  value={futState.editMaxVagas}
                  onChange={(e) => futState.setEditMaxVagas(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Ex: 20"
                  min="1"
                />
              </div>

              {/* Jogadores por time */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Jogadores por time *
                </label>
                <input
                  type="number"
                  value={futState.editPlayersPerTeam}
                  onChange={(e) => futState.setEditPlayersPerTeam(e.target.value)}
                  className="w-full px-3 py-2 bg-primary border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-secondary"
                  placeholder="Ex: 5"
                  min="1"
                />
              </div>

              {/* Botões */}
              <div className="flex space-x-3 pt-4">
                <button
                  onClick={() => futState.setShowEditInfoModal(false)}
                  className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={() => futActions.handleUpdateFutInfo()}
                  className="flex-1 px-4 py-2 bg-secondary text-primary rounded-lg font-medium hover:bg-secondary-darker transition-colors"
                >
                  Salvar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default FutDetailPage;
