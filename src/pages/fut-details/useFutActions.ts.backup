import { useCallback } from 'react';
import { useRouter } from 'next/router';
import { ref, get, set, push, remove, update } from 'firebase/database';
import { database } from '@/lib/firebase';
import { useAuth } from '@/contexts/AuthContext';
import { Fut, RankingType } from './types';

export function useFutActions(
  fut: Fut | null,
  isAdmin: boolean,
  futState: any
) {
  const router = useRouter();
  const { user } = useAuth();

  // Função para obter texto de recorrência
  const getRecurrenceText = useCallback(() => {
    if (!fut) return '';
    if (fut.type === 'avulso') return 'Partida única';
    if (fut.recurrence) {
      if (fut.recurrence.kind === 'weekly') {
        const days = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];
        return `Toda ${days[fut.recurrence.day]}`;
      }
      return `Todo dia ${fut.recurrence.day} do mês`;
    }
    return 'Recorrência não definida';
  }, [fut]);

  // Função para liberar lista
  const handleReleaseList = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await update(futRef, {
        listReleased: true,
        releasedVagas: futState.releasedVagas || fut.maxVagas,
      });
      futState.setListReleased(true);
    } catch (error) {
      console.error('Error releasing list:', error);
      alert('Erro ao liberar lista');
    }
  }, [fut, isAdmin, futState]);

  // Função para confirmar presença
  const handleConfirmPresence = useCallback(async (isIn: boolean) => {
    if (!fut || !user) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      const currentConfirmed = futState.confirmedMembers || [];
      
      let newConfirmed;
      if (isIn) {
        newConfirmed = [...currentConfirmed, user.uid];
      } else {
        newConfirmed = currentConfirmed.filter((id: string) => id !== user.uid);
      }

      await update(futRef, {
        confirmedMembers: newConfirmed,
      });
      futState.setConfirmedMembers(newConfirmed);
    } catch (error) {
      console.error('Error confirming presence:', error);
      alert('Erro ao confirmar presença');
    }
  }, [fut, user, futState]);

  // Função para iniciar fut
  const handleStartFut = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await update(futRef, {
        futStarted: true,
        startedAt: new Date().toISOString(),
      });
      futState.setFutStarted(true);
    } catch (error) {
      console.error('Error starting fut:', error);
      alert('Erro ao iniciar fut');
    }
  }, [fut, isAdmin, futState]);


  // Função para buscar membros
  const handleSearchMembers = useCallback(async () => {
    if (!futState.memberSearchQuery.trim()) {
      futState.setMemberSearchResults([]);
      return;
    }

    try {
      const usersRef = ref(database, 'users');
      const snapshot = await get(usersRef);
      const usersData = snapshot.val() || {};
      
      const results = Object.entries(usersData)
        .filter(([userId, userData]: [string, any]) => {
          const name = userData?.name?.toLowerCase() || '';
          const email = userData?.email?.toLowerCase() || '';
          const query = futState.memberSearchQuery.toLowerCase();
          return (name.includes(query) || email.includes(query)) && userId !== user?.uid;
        })
        .map(([userId, userData]) => ({
          id: userId,
          ...(userData as any),
        }));

      futState.setMemberSearchResults(results);
    } catch (error) {
      console.error('Error searching members:', error);
      futState.setMemberSearchResults([]);
    }
  }, [futState, user]);



  // Função para encerrar fut
  const handleEndFut = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await update(futRef, {
        futEnded: true,
        endedAt: new Date().toISOString(),
      });
      futState.setFutEnded(true);
    } catch (error) {
      console.error('Error ending fut:', error);
      alert('Erro ao encerrar fut');
    }
  }, [fut, isAdmin, futState]);

  // Função para iniciar votação
  const handleStartVoting = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await update(futRef, {
        votingOpen: true,
        votingStartedAt: new Date().toISOString(),
      });
      futState.setVotingOpen(true);
    } catch (error) {
      console.error('Error starting voting:', error);
      alert('Erro ao iniciar votação');
    }
  }, [fut, isAdmin, futState]);

  // Função para encerrar votação
  const handleEndVoting = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await update(futRef, {
        votingOpen: false,
        votingEnded: true,
        votingEndedAt: new Date().toISOString(),
      });
      futState.setVotingOpen(false);
      futState.setVotingEnded(true);
    } catch (error) {
      console.error('Error ending voting:', error);
      alert('Erro ao encerrar votação');
    }
  }, [fut, isAdmin, futState]);

  // Função para votar
  const handleVote = useCallback(async (playerId: string, rating: number) => {
    if (!fut || !user) return;

    try {
      const voteRef = ref(database, `futs/${fut.id}/userVotes/${user.uid}/${playerId}`);
      await set(voteRef, rating);

      // Update local state
      futState.setUserVotes((prev: any) => ({
        ...prev,
        [user.uid]: {
          ...prev[user.uid],
          [playerId]: rating,
        },
      }));
    } catch (error) {
      console.error('Error voting:', error);
      alert('Erro ao votar');
    }
  }, [fut, user, futState]);

  // Função para gerar ranking
  const handleGenerateRanking = useCallback(async (type: RankingType = 'pontuacao') => {
    if (!fut || !isAdmin) return;

    try {
      futState.setRankingType(type);
      futState.setLoadingRanking(true);
      
      if (type === 'vitorias') {
        // Team wins ranking
        const teamWins = Object.entries(futState.teamStats)
          .map(([teamName, stats]: [string, any]) => ({
            teamName,
            wins: stats.wins,
          }))
          .sort((a, b) => b.wins - a.wins);
        
        futState.setRanking(teamWins);
      } else {
        // Calculate average votes for each player (only for members, not guests)
        const playerAverages: Record<string, number> = {};
        
        Object.entries(futState.userVotes).forEach(([userId, votes]: [string, any]) => {
          Object.entries(votes).forEach(([playerId, rating]: [string, any]) => {
            if (!playerAverages[playerId]) {
              playerAverages[playerId] = 0;
            }
            playerAverages[playerId] += rating;
          });
        });

        const playerCounts: Record<string, number> = {};
        Object.values(futState.userVotes).forEach((votes: any) => {
          Object.keys(votes).forEach(playerId => {
            playerCounts[playerId] = (playerCounts[playerId] || 0) + 1;
          });
        });

        const sortedPlayers = Object.entries(playerAverages)
          .filter(([playerId]) => !futState.members[playerId]?.isGuest && futState.members[playerId] && playerId !== 'VAGA')
          .map(([playerId, totalVotes]) => {
            const count = playerCounts[playerId] || 1;
            const average = totalVotes / count;
            const player = futState.members[playerId];
            const stats = futState.playerStats[playerId] || { goals: 0, assists: 0 };
            
            let score = 0;
            if (type === 'pontuacao') {
              // Cada estrela vale 20 pontos, gols valem 10 pontos, assistências valem 5 pontos
              score = average * 20 + stats.goals * 10 + stats.assists * 5;
            } else if (type === 'artilharia') {
              score = stats.goals;
            } else if (type === 'assistencias') {
              score = stats.assists;
            }
            
            return {
              playerId,
              name: player?.name || 'Jogador',
              score,
              goals: stats.goals,
              assists: stats.assists,
            };
          })
          .sort((a, b) => b.score - a.score);
        
        futState.setRanking(sortedPlayers);
      }
      futState.setShowRanking(true);
      futState.setLoadingRanking(false);
    } catch (error) {
      console.error('Error generating ranking:', error);
      alert('Erro ao gerar ranking');
      futState.setLoadingRanking(false);
    }
  }, [fut, isAdmin, futState]);

  // Função para finalizar fut
  const handleFinalizeFut = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await update(futRef, {
        finalized: true,
        finalizedAt: new Date().toISOString(),
        futStarted: false,
        futEnded: false,
        votingOpen: false,
        votingEnded: false,
        listReleased: false,
        confirmedMembers: [],
        teams: null,
        teamStats: null,
        playerStats: null,
        playerVotes: null,
        userVotes: null,
        ranking: null,
        showRanking: false,
      });

      // Save to history
      const historyRef = ref(database, `futs/${fut.id}/history`);
      const historyEntry = {
        id: Date.now().toString(),
        date: new Date().toISOString(),
        teams: futState.teams,
        teamStats: futState.teamStats,
        playerStats: futState.playerStats,
        ranking: futState.ranking,
        finalizedAt: new Date().toISOString(),
      };
      await push(historyRef, historyEntry);

      // Reset all states
      futState.setFutStarted(false);
      futState.setFutEnded(false);
      futState.setVotingOpen(false);
      futState.setVotingEnded(false);
      futState.setListReleased(false);
      futState.setConfirmedMembers([]);
      futState.setTeams({});
      futState.setTeamStats({});
      futState.setPlayerStats({});
      futState.setPlayerVotes({});
      futState.setUserVotes({});
      futState.setShowRanking(false);
      futState.setRanking(null);
      futState.setSelectedTeam(null);
      
      // Voltar para a aba fut
      futState.setActiveTab('fut');

      alert('Fut finalizado com sucesso!');
    } catch (error) {
      console.error('Error finalizing fut:', error);
      alert('Erro ao finalizar fut');
    }
  }, [fut, isAdmin, futState]);

  // Função para deletar fut
  const handleDeleteFut = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await remove(futRef);
      
      router.push('/');
    } catch (error) {
      console.error('Error deleting fut:', error);
      alert('Erro ao deletar fut');
    }
  }, [fut, isAdmin, router]);

  // Função para deletar dados do fut
  const handleDeleteData = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await update(futRef, {
        teams: null,
        teamStats: null,
        playerStats: null,
        playerVotes: null,
        userVotes: null,
        futStarted: false,
        futEnded: false,
        votingOpen: false,
        votingEnded: false,
        listReleased: false,
        confirmedMembers: [],
      });

      futState.setTeams({});
      futState.setTeamStats({});
      futState.setPlayerStats({});
      futState.setPlayerVotes({});
      futState.setUserVotes({});
      futState.setFutStarted(false);
      futState.setFutEnded(false);
      futState.setVotingOpen(false);
      futState.setVotingEnded(false);
      futState.setListReleased(false);
      futState.setConfirmedMembers([]);
      futState.setShowRanking(false);
      futState.setRanking(null);
      
      alert('Dados do fut excluídos com sucesso!');
    } catch (error) {
      console.error('Error deleting fut data:', error);
      alert('Erro ao excluir dados do fut');
    }
  }, [fut, isAdmin, futState]);

  // Função para deletar times
  const handleDeleteTeams = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      const futRef = ref(database, `futs/${fut.id}`);
      await update(futRef, {
        teams: null,
      });

      futState.setTeams({});
      alert('Times excluídos com sucesso!');
    } catch (error) {
      console.error('Error deleting teams:', error);
      alert('Erro ao excluir times');
    }
  }, [fut, isAdmin, futState]);


  // Função para atualizar vitórias do time
  const handleUpdateTeamWins = useCallback(async (teamName: string, change: number) => {
    if (!fut || !isAdmin) return;

    try {
      const currentWins = futState.teamStats[teamName]?.wins || 0;
      const newWins = Math.max(0, currentWins + change);
      
      const futRef = ref(database, `futs/${fut.id}/teamStats/${teamName}`);
      await set(futRef, { wins: newWins });

      futState.setTeamStats((prev: any) => ({
        ...prev,
        [teamName]: { wins: newWins }
      }));
    } catch (error) {
      console.error('Error updating team wins:', error);
      alert('Erro ao atualizar vitórias do time');
    }
  }, [fut, isAdmin, futState]);

  // Função para atualizar estatísticas do jogador
  const handleUpdatePlayerStats = useCallback(async (playerId: string, stat: 'goals' | 'assists', change: number) => {
    if (!fut || !isAdmin) return;

    try {
      const currentStats = futState.playerStats[playerId] || { goals: 0, assists: 0 };
      const newValue = Math.max(0, currentStats[stat] + change);
      
      const futRef = ref(database, `futs/${fut.id}/playerStats/${playerId}`);
      await set(futRef, {
        ...currentStats,
        [stat]: newValue
      });

      futState.setPlayerStats((prev: any) => ({
        ...prev,
        [playerId]: {
          ...currentStats,
          [stat]: newValue
        }
      }));

      // Update user's total stats
      const userRef = ref(database, `users/${playerId}`);
      const userSnapshot = await get(userRef);
      const userData = userSnapshot.val();
      
      if (userData) {
        const currentTotal = userData.totalGoals || 0;
        const currentAssists = userData.totalAssists || 0;
        
        const newTotalGoals = stat === 'goals' ? currentTotal + change : currentTotal;
        const newTotalAssists = stat === 'assists' ? currentAssists + change : currentAssists;
        
        await set(ref(database, `users/${playerId}/totalGoals`), Math.max(0, newTotalGoals));
        await set(ref(database, `users/${playerId}/totalAssists`), Math.max(0, newTotalAssists));
      }
    } catch (error) {
      console.error('Error updating player stats:', error);
      alert('Erro ao atualizar estatísticas do jogador');
    }
  }, [fut, isAdmin, futState]);

  // Função para baixar ranking
  const handleDownloadRanking = useCallback(() => {
    if (!futState.ranking || futState.ranking.length === 0) return;

    const rankingText = futState.ranking
      .map((item: any, index: number) => {
        const position = index + 1;
        const score = futState.rankingType === 'pontuacao' ? item.score :
                     futState.rankingType === 'artilharia' ? item.goals :
                     futState.rankingType === 'assistencias' ? item.assists :
                     item.wins;
        const unit = futState.rankingType === 'pontuacao' ? 'pts' :
                    futState.rankingType === 'artilharia' ? 'gols' :
                    futState.rankingType === 'assistencias' ? 'assist' :
                    'vitórias';
        
        return `${position}. ${item.name || item.teamName} - ${score} ${unit}`;
      })
      .join('\n');

    const blob = new Blob([rankingText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ranking-${fut?.name || 'fut'}-${futState.rankingType}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, [futState.ranking, futState.rankingType, fut]);


  // Função para deletar anúncio
  const handleDeleteAnnouncement = useCallback(async (announcementId: string) => {
    if (!fut || !isAdmin) return;

    try {
      const announcementRef = ref(database, `futs/${fut.id}/announcements/${announcementId}`);
      await remove(announcementRef);

      futState.setAnnouncements((prev: any) => 
        prev.filter((announcement: any) => announcement.id !== announcementId)
      );
      
      alert('Aviso excluído com sucesso!');
    } catch (error) {
      console.error('Error deleting announcement:', error);
      alert('Erro ao excluir aviso');
    }
  }, [fut, isAdmin, futState]);

  // Função para remover membro
  const handleRemoveMember = useCallback(async (memberId: string, memberName: string) => {
    if (!fut || !isAdmin) return;

    if (!confirm(`Tem certeza que deseja remover ${memberName} do fut?`)) {
      return;
    }

    try {
      const futRef = ref(database, `futs/${fut.id}/members/${memberId}`);
      await remove(futRef);

      futState.setMembers((prev: any) => {
        const newMembers = { ...prev };
        delete newMembers[memberId];
        return newMembers;
      });

      // Remove from confirmed members if present
      futState.setConfirmedMembers((prev: any) => 
        prev.filter((id: any) => id !== memberId)
      );

      alert('Membro removido com sucesso!');
    } catch (error) {
      console.error('Error removing member:', error);
      alert('Erro ao remover membro');
    }
  }, [fut, isAdmin, futState]);

  // Função para compartilhar lista de confirmados
  const handleShareList = useCallback(() => {
    const confirmedNames = futState.confirmedMembers.map((memberId: string, index: number) => {
      const member = futState.members[memberId];
      return `${index + 1} - ${member?.name || 'VAGA'}`;
    }).join('\n');

    const message = `Lista de confirmados - ${fut?.name} - ${fut?.time || '19:00'} - ${getRecurrenceText()} - 23/09/2025\n\n${confirmedNames}`;
    
    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
    window.open(whatsappUrl, '_blank');
  }, [fut, futState.confirmedMembers, futState.members]);

  // Função para compartilhar times
  const handleShareTeams = useCallback(() => {
    let message = `${fut?.name} - ${getRecurrenceText()} às ${fut?.time || '19:00'} - 23/09/2025\n\nTIMES:\n\n`;
    
    Object.entries(futState.teams).forEach(([teamName, players]) => {
      message += `${teamName}\n`;
      (players as string[]).forEach((playerId: string, index: number) => {
        const player = futState.members[playerId];
        message += `${index + 1}- ${player?.name || 'VAGA'}\n`;
      });
      
      // Add VAGA if team is not full
      while ((players as string[]).length < parseInt(futState.playersPerTeam)) {
        message += `${(players as string[]).length + 1}- VAGA\n`;
        (players as string[]).push('VAGA');
      }
      
      message += '\n';
    });
    
    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
    window.open(whatsappUrl, '_blank');
  }, [fut, futState.teams, futState.members, futState.playersPerTeam]);

  // Função para sortear times
  const handleTeamDraw = useCallback(async () => {
    const teamCountNum = parseInt(futState.teamCount);
    const playersPerTeamNum = parseInt(futState.playersPerTeam);
    
    if (!futState.teamCount || !futState.playersPerTeam || isNaN(teamCountNum) || isNaN(playersPerTeamNum)) {
      alert('Por favor, preencha todos os campos');
      return;
    }
    
    if (teamCountNum < 2) {
      alert('Deve ter pelo menos 2 times');
      return;
    }
    
    if (playersPerTeamNum < 1) {
      alert('Deve ter pelo menos 1 jogador por time');
      return;
    }

    const shuffledMembers = [...futState.confirmedMembers].sort(() => Math.random() - 0.5);
    const newTeams: Record<string, string[]> = {};
    
    // Initialize teams
    for (let i = 1; i <= teamCountNum; i++) {
      newTeams[`Time ${i}`] = [];
    }
    
    // Distribute players
    let memberIndex = 0;
    for (let i = 1; i <= teamCountNum; i++) {
      const teamName = `Time ${i}`;
      for (let j = 0; j < playersPerTeamNum; j++) {
        if (memberIndex < shuffledMembers.length) {
          newTeams[teamName].push(shuffledMembers[memberIndex]);
          memberIndex++;
        } else {
          // Add VAGA if no more players
          newTeams[teamName].push('VAGA');
        }
      }
    }

    try {
      const futRef = ref(database, `futs/${fut?.id}/teams`);
      await set(futRef, newTeams);
      
      futState.setTeams(newTeams);
      futState.setShowTeamDrawModal(false);
      
      // Initialize stats
      const initialTeamStats: Record<string, { wins: number }> = {};
      const initialPlayerStats: Record<string, { goals: number; assists: number }> = {};
      
      Object.keys(newTeams).forEach(teamName => {
        initialTeamStats[teamName] = { wins: 0 };
      });
      
      Object.values(newTeams).flat().forEach(playerId => {
        initialPlayerStats[playerId] = { goals: 0, assists: 0 };
      });
      
      futState.setTeamStats(initialTeamStats);
      futState.setPlayerStats(initialPlayerStats);
      
      // Save initial stats to Firebase
      try {
        await set(ref(database, `futs/${fut?.id}/teamStats`), initialTeamStats);
        await set(ref(database, `futs/${fut?.id}/playerStats`), initialPlayerStats);
      } catch (error) {
        console.error('Error saving initial stats:', error);
      }
      
      alert('Times sorteados com sucesso!');
    } catch (error) {
      console.error('Error drawing teams:', error);
      alert('Erro ao sortear times');
    }
  }, [fut, futState]);

  // Função para escolher times
  const handleTeamSelect = useCallback(async () => {
    const teamCountNum = parseInt(futState.teamCount);
    const playersPerTeamNum = parseInt(futState.playersPerTeam);
    
    if (!futState.teamCount || !futState.playersPerTeam || isNaN(teamCountNum) || isNaN(playersPerTeamNum)) {
      alert('Por favor, preencha todos os campos');
      return;
    }
    
    if (teamCountNum < 2) {
      alert('Deve ter pelo menos 2 times');
      return;
    }
    
    if (playersPerTeamNum < 1) {
      alert('Deve ter pelo menos 1 jogador por time');
      return;
    }

    const newTeams: Record<string, string[]> = {};
    for (let i = 1; i <= teamCountNum; i++) {
      newTeams[`Time ${i}`] = [];
    }
    
    futState.setTeams(newTeams);
    futState.setShowTeamSelectModal(false);
    futState.setSelectedTeam('Time 1');
    
    // Save teams to Firebase
    try {
      await set(ref(database, `futs/${fut?.id}/teams`), newTeams);
    } catch (error) {
      console.error('Error saving teams:', error);
    }
    
    // Initialize team stats
    const initialTeamStats: Record<string, { wins: number }> = {};
    Object.keys(newTeams).forEach(teamName => {
      initialTeamStats[teamName] = { wins: 0 };
    });
    
    futState.setTeamStats(initialTeamStats);
    
    // Save initial team stats to Firebase
    try {
      await set(ref(database, `futs/${fut?.id}/teamStats`), initialTeamStats);
    } catch (error) {
      console.error('Error saving initial team stats:', error);
    }
    
    alert('Times criados! Agora você pode escolher os jogadores para cada time.');
  }, [fut, futState]);

  // Função para adicionar jogador ao time
  const handleAddPlayerToTeam = useCallback(async (playerId: string, teamName: string) => {
    if (!fut || !isAdmin) return;

    futState.setTeams((prev: any) => {
      const newTeams = { ...prev };
      
      // Remove player from all teams first
      Object.keys(newTeams).forEach(team => {
        newTeams[team] = newTeams[team].filter((id: any) => id !== playerId);
      });
      
      // Add player to selected team
      newTeams[teamName] = [...newTeams[teamName], playerId];
      
      // Ensure all teams exist even if empty (to prevent Firebase from removing them)
      Object.keys(newTeams).forEach(team => {
        if (!newTeams[team]) {
          newTeams[team] = [];
        }
      });
      
      // Save to Firebase
      try {
        set(ref(database, `futs/${fut.id}/teams`), newTeams);
      } catch (error) {
        console.error('Error saving teams:', error);
      }
      
      return newTeams;
    });
  }, [fut, isAdmin, futState]);

  // Função para remover jogador do time
  const handleRemovePlayerFromTeam = useCallback(async (playerId: string, teamName: string) => {
    if (!fut || !isAdmin) return;

    futState.setTeams((prev: any) => {
      const newTeams = {
        ...prev,
        [teamName]: prev[teamName].filter((id: any) => id !== playerId)
      };
      
      // Ensure all teams exist even if empty (to prevent Firebase from removing them)
      Object.keys(newTeams).forEach(team => {
        if (!newTeams[team]) {
          newTeams[team] = [];
        }
      });
      
      // Save to Firebase
      try {
        set(ref(database, `futs/${fut.id}/teams`), newTeams);
      } catch (error) {
        console.error('Error saving teams:', error);
      }
      
      return newTeams;
    });
  }, [fut, isAdmin, futState]);

  // Função para salvar times
  const handleSaveTeams = useCallback(async () => {
    if (!fut || !isAdmin) return;

    try {
      await set(ref(database, `futs/${fut.id}/teams`), futState.teams);
      alert('Times salvos com sucesso!');
    } catch (error) {
      console.error('Error saving teams:', error);
      alert('Erro ao salvar times');
    }
  }, [fut, isAdmin, futState]);

  // Função para selecionar tipo de convidado
  const handleGuestTypeSelect = useCallback((type: 'avulso' | 'cadastrado') => {
    futState.setGuestType(type);
    futState.setShowGuestTypeModal(true);
    futState.setShowGuestModal(false);
  }, [futState]);

  // Função para adicionar convidado (exatamente como no backup)
  const handleAddGuest = useCallback(async () => {
    if (!futState.guestType) return;

    try {
      console.log('Adding guest:', { guestType: futState.guestType, guestName: futState.guestName, guestEmail: futState.guestEmail, guestPhone: futState.guestPhone });
      
      if (futState.guestType === 'avulso') {
        if (!futState.guestName.trim()) {
          alert('Por favor, digite o nome do convidado');
          return;
        }
        
        // Add guest to confirmed list
        const guestId = `guest_${Date.now()}`;
        futState.setConfirmedMembers([...futState.confirmedMembers, guestId]);
        
        // Store guest data in members object
        const guestData = {
          name: futState.guestName,
          isGuest: true,
          guestType: 'avulso'
        };
        
        futState.setMembers((prev: any) => ({
          ...prev,
          [guestId]: guestData
        }));
        
        alert('Convidado avulso adicionado com sucesso!');
      } else {
        if (!futState.guestEmail.trim() && !futState.guestPhone.trim()) {
          alert('Por favor, digite o email ou telefone do convidado');
          return;
        }
        
        // Search for existing user
        const usersRef = ref(database, 'users');
        const snapshot = await get(usersRef);
        const users = snapshot.val() || {};
        
        console.log('Searching for user with email/phone:', { guestEmail: futState.guestEmail, guestPhone: futState.guestPhone });
        console.log('All users:', users);
        
        const existingUser = Object.entries(users).find(([uid, userData]: [string, any]) => 
          userData.email === futState.guestEmail || userData.phone === futState.guestPhone
        );
        
        if (existingUser) {
          const [uid, userData] = existingUser;
          const userDataTyped = userData as any;
          console.log('Found existing user:', { uid, userData: userDataTyped });
          futState.setConfirmedMembers([...futState.confirmedMembers, uid]);
          futState.setMembers((prev: any) => ({
            ...prev,
            [uid]: { 
              name: userDataTyped.name || '',
              email: userDataTyped.email || '',
              phone: userDataTyped.phone || '',
              photoURL: userDataTyped.photoURL || '',
              position: userDataTyped.position || '',
              isGuest: true, 
              guestType: 'cadastrado' 
            }
          }));
          alert('Convidado cadastrado adicionado com sucesso!');
        } else {
          alert('Usuário não encontrado com este email/telefone');
          return;
        }
      }
      
      // Reset form (exatamente como no backup)
      futState.setGuestName('');
      futState.setGuestEmail('');
      futState.setGuestPhone('');
      futState.setGuestType(null);
      futState.setShowGuestTypeModal(false);
    } catch (error: any) {
      console.error('Error adding guest:', error);
      alert(`Erro ao adicionar convidado: ${error?.message || 'Erro desconhecido'}`);
    }
  }, [futState]);

  // Função para adicionar usuário pesquisado
  const handleAddSearchedUser = useCallback(async (userData: any) => {
    try {
      console.log('Adding searched user as guest:', userData);
      
      // Validate userData
      if (!userData.uid) {
        throw new Error('UID do usuário não encontrado');
      }
      
      if (!userData.name) {
        throw new Error('Nome do usuário não encontrado');
      }
      
      futState.setConfirmedMembers([...futState.confirmedMembers, userData.uid]);
      futState.setMembers((prev: any) => ({
        ...prev,
        [userData.uid]: { 
          ...userData, 
          isGuest: true, 
          guestType: 'cadastrado' 
        }
      }));
      
      // Reset search
      futState.setSearchQuery('');
      futState.setSearchResults([]);
      futState.setShowGuestTypeModal(false);
      
      alert('Convidado cadastrado adicionado com sucesso!');
    } catch (error: any) {
      console.error('Error adding searched user:', error);
      alert(`Erro ao adicionar convidado: ${error?.message || 'Erro desconhecido'}`);
    }
  }, [futState]);

  // Função para pesquisar usuários
  const handleSearchUsers = useCallback(async () => {
    if (!futState.searchQuery.trim()) {
      futState.setSearchResults([]);
      return;
    }

    try {
      console.log('Searching for users with query:', futState.searchQuery);
      const usersRef = ref(database, 'users');
      const snapshot = await get(usersRef);
      const users = snapshot.val() || {};
      
      console.log('All users:', users);
      console.log('Current members:', futState.members);
      
      const results = Object.entries(users)
        .filter(([uid, userData]: [string, any]) => 
          (userData.email?.toLowerCase().includes(futState.searchQuery.toLowerCase()) ||
          userData.phone?.includes(futState.searchQuery) ||
          userData.name?.toLowerCase().includes(futState.searchQuery.toLowerCase())) &&
          !futState.members[uid] // Not already a member
        )
        .map(([uid, userData]: [string, any]) => ({ 
          uid, 
          name: userData.name || '',
          email: userData.email || '',
          phone: userData.phone || '',
          photoURL: userData.photoURL || '',
          position: userData.position || ''
        }))
        .slice(0, 10);
      
      console.log('Search results:', results);
      futState.setSearchResults(results);
    } catch (error) {
      console.error('Error searching users:', error);
      futState.setSearchResults([]);
    }
  }, [futState]);

  // Função para gerar imagem do ranking (exatamente como no backup)
  const handleGenerateImage = useCallback(async () => {
    if (!futState.ranking || futState.ranking.length === 0) return;
    
    const rankingTitle = futState.rankingType === 'pontuacao' ? 'Ranking de Pontuação' :
                        futState.rankingType === 'artilharia' ? 'Ranking de Artilharia' :
                        futState.rankingType === 'assistencias' ? 'Ranking de Assistências' :
                        'Ranking de Vitórias';
    
    // Create canvas
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Set canvas size
    canvas.width = 800;
    canvas.height = 600;
    
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
    gradient.addColorStop(0, '#1a1a1a');
    gradient.addColorStop(1, '#2d2d2d');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Header background
    ctx.fillStyle = '#333333';
    ctx.fillRect(0, 0, canvas.width, 120);
    
    // Title
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 28px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(fut?.name || 'Fut', canvas.width / 2, 40);
    
    ctx.font = 'bold 20px Arial';
    ctx.fillText(rankingTitle, canvas.width / 2, 70);
    
    // Date
    ctx.font = '14px Arial';
    ctx.fillStyle = '#cccccc';
    ctx.fillText(new Date().toLocaleDateString('pt-BR'), canvas.width / 2, 95);
    
    // Rankings
    ctx.font = '18px Arial';
    ctx.textAlign = 'left';
    
    futState.ranking.slice(0, 5).forEach((item: any, index: number) => {
      const y = 160 + (index * 80);
      const position = index + 1;
      const medal = position === 1 ? '🥇' : position === 2 ? '🥈' : position === 3 ? '🥉' : '';
      
      // Background for each ranking item
      ctx.fillStyle = '#2a2a2a';
      ctx.fillRect(20, y - 30, canvas.width - 40, 60);
      
      // Border
      ctx.strokeStyle = '#444444';
      ctx.lineWidth = 1;
      ctx.strokeRect(20, y - 30, canvas.width - 40, 60);
      
      // Position and medal
      ctx.fillStyle = '#00ff00';
      ctx.font = 'bold 24px Arial';
      ctx.fillText(`${position}`, 40, y);
      
      // Medal
      if (medal) {
        ctx.font = '32px Arial';
        ctx.fillText(medal, 80, y);
      }
      
      // Player photo or initial
      if (futState.rankingType !== 'vitorias') {
        const player = futState.members[item.playerId];
        if (player?.photoURL) {
          // Draw photo circle
          ctx.fillStyle = '#444444';
          ctx.beginPath();
          ctx.arc(140, y - 10, 20, 0, 2 * Math.PI);
          ctx.fill();
          
          // Load and draw image
          const img = new Image();
          img.onload = () => {
            ctx.save();
            ctx.beginPath();
            ctx.arc(140, y - 10, 20, 0, 2 * Math.PI);
            ctx.clip();
            ctx.drawImage(img, 120, y - 30, 40, 40);
            ctx.restore();
          };
          img.src = player.photoURL;
        } else {
          // Draw initial circle
          ctx.fillStyle = '#666666';
          ctx.beginPath();
          ctx.arc(140, y - 10, 20, 0, 2 * Math.PI);
          ctx.fill();
          
          // Draw initial
          ctx.fillStyle = '#ffffff';
          ctx.font = 'bold 16px Arial';
          ctx.textAlign = 'center';
          ctx.fillText((player?.name?.charAt(0) || 'C').toUpperCase(), 140, y - 5);
          ctx.textAlign = 'left';
        }
        
        // Player name
        ctx.fillStyle = '#ffffff';
        ctx.font = '18px Arial';
        ctx.fillText(item.name || 'Jogador', 180, y);
      } else {
        // Team name for victories ranking
        ctx.fillStyle = '#ffffff';
        ctx.font = '18px Arial';
        ctx.fillText(item.teamName || 'Time', 180, y);
      }
      
      // Value
      ctx.fillStyle = '#00ff00';
      ctx.font = 'bold 18px Arial';
      ctx.textAlign = 'right';
      if (futState.rankingType === 'vitorias') {
        ctx.fillText(`${item.wins} vitórias`, canvas.width - 40, y);
      } else {
        const value = futState.rankingType === 'pontuacao' ? item.score :
                     futState.rankingType === 'artilharia' ? item.goals :
                     item.assists;
        const unit = futState.rankingType === 'pontuacao' ? 'pts' :
                    futState.rankingType === 'artilharia' ? 'gols' :
                    'assistências';
        ctx.fillText(`${value} ${unit}`, canvas.width - 40, y);
      }
      ctx.textAlign = 'left';
    });
    
    // Footer
    ctx.fillStyle = '#666666';
    ctx.font = '12px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Gerado pelo +Fut', canvas.width / 2, canvas.height - 20);
    
    // Download image
    canvas.toBlob((blob) => {
      if (blob) {
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${fut?.name || 'Fut'}_${rankingTitle.replace(/\s+/g, '_')}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      }
    }, 'image/png');
  }, [fut, futState]);

  return {
    getRecurrenceText,
    handleReleaseList,
    handleConfirmPresence,
    handleStartFut,
    handleShareList,
    handleGuestTypeSelect,
    handleSearchUsers,
    handleAddGuest,
    handleAddSearchedUser,
    handleSearchMembers,
    handleEndFut,
    handleStartVoting,
    handleEndVoting,
    handleVote,
    handleGenerateRanking,
    handleFinalizeFut,
    handleDeleteFut,
    handleDeleteData,
    handleDeleteTeams,
    handleShareTeams,
    handleUpdateTeamWins,
    handleUpdatePlayerStats,
    handleDownloadRanking,
    handleGenerateImage,
    handleDeleteAnnouncement,
    handleRemoveMember,
    handleTeamDraw,
    handleTeamSelect,
    handleAddPlayerToTeam,
    handleRemovePlayerFromTeam,
    handleSaveTeams,
  };
}